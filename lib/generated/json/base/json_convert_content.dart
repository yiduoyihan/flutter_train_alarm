// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:f_train_alarm/model/login/base_bean_entity.dart';
import 'package:f_train_alarm/generated/json/base_bean_entity_helper.dart';
import 'package:f_train_alarm/model/login/home_list_bean_entity.dart';
import 'package:f_train_alarm/generated/json/home_list_bean_entity_helper.dart';
import 'package:f_train_alarm/model/login/login_bean_entity.dart';
import 'package:f_train_alarm/generated/json/login_bean_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case BaseBeanEntity:
			return baseBeanEntityFromJson(data as BaseBeanEntity, json) as T;			case HomeListBeanEntity:
			return homeListBeanEntityFromJson(data as HomeListBeanEntity, json) as T;			case HomeListBeanData:
			return homeListBeanDataFromJson(data as HomeListBeanData, json) as T;			case LoginBeanEntity:
			return loginBeanEntityFromJson(data as LoginBeanEntity, json) as T;			case LoginBeanData:
			return loginBeanDataFromJson(data as LoginBeanData, json) as T;			case LoginBeanDataUserInfo:
			return loginBeanDataUserInfoFromJson(data as LoginBeanDataUserInfo, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case BaseBeanEntity:
			return baseBeanEntityToJson(data as BaseBeanEntity);			case HomeListBeanEntity:
			return homeListBeanEntityToJson(data as HomeListBeanEntity);			case HomeListBeanData:
			return homeListBeanDataToJson(data as HomeListBeanData);			case LoginBeanEntity:
			return loginBeanEntityToJson(data as LoginBeanEntity);			case LoginBeanData:
			return loginBeanDataToJson(data as LoginBeanData);			case LoginBeanDataUserInfo:
			return loginBeanDataUserInfoToJson(data as LoginBeanDataUserInfo);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'BaseBeanEntity':
			return BaseBeanEntity().fromJson(json);			case 'HomeListBeanEntity':
			return HomeListBeanEntity().fromJson(json);			case 'HomeListBeanData':
			return HomeListBeanData().fromJson(json);			case 'LoginBeanEntity':
			return LoginBeanEntity().fromJson(json);			case 'LoginBeanData':
			return LoginBeanData().fromJson(json);			case 'LoginBeanDataUserInfo':
			return LoginBeanDataUserInfo().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'BaseBeanEntity':
			return List<BaseBeanEntity>();			case 'HomeListBeanEntity':
			return List<HomeListBeanEntity>();			case 'HomeListBeanData':
			return List<HomeListBeanData>();			case 'LoginBeanEntity':
			return List<LoginBeanEntity>();			case 'LoginBeanData':
			return List<LoginBeanData>();			case 'LoginBeanDataUserInfo':
			return List<LoginBeanDataUserInfo>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}